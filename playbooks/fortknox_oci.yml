---
- name: fortknox for oracle (oci)
  hosts: localhost
  connection: local
  collections:
    - oracle.oci
  gather_facts: true
  become: true
  become_user: root

  pre_tasks:
    - name: fetch decrypt admin pass
      oci_key_management_decrypted_data:
        auth_type: "instance_principal"
        ciphertext: "{{ admin_password_cipher }}"
        service_endpoint: "{{ oci_kms_endpoint }}"
        key_id: "{{ oci_kms_keyid }}"
      register: admin_password_decrypt

    - name: fetch decrypt db pass
      oci_key_management_decrypted_data:
        auth_type: "instance_principal"
        ciphertext: "{{ db_password_cipher }}"
        service_endpoint: "{{ oci_kms_endpoint }}"
        key_id: "{{ oci_kms_keyid }}"
      register: db_password_decrypt

#    - name: fetch decrypt oo pass
#      oci_key_management_decrypted_data:
#        auth_type: "instance_principal"
#        ciphertext: "{{ oo_password_cipher }}"
#        service_endpoint: "{{ oci_kms_endpoint }}"
#        key_id: "{{ oci_kms_keyid }}"
#      register: oo_password_decrypt

#    - name: fetch decrypt bucket user key
#      oci_key_management_decrypted_data:
#        auth_type: "instance_principal"
#        ciphertext: "{{ bucket_user_key_cipher }}"
#        service_endpoint: "{{ oci_kms_endpoint }}"
#        key_id: "{{ oci_kms_keyid }}"
#      register: bucket_user_key_decrypt

  tasks:

    - name: check swap file exists
      stat:
        path: /opt/swap.file
      register: swap_file

    - name: create swap file if not exists
      shell: |
        dd if=/dev/zero of=/opt/swap.file bs=1024 count=1048576
        mkswap /opt/swap.file
      when:
       - swap_file.stat.exists|bool == false
       - ansible_swaptotal_mb < 1

    - name: set swap file permissions
      file:
        path: /opt/swap.file
        state: file
        owner: root
        group: root
        mode: '0600'
      when:
        - ansible_swaptotal_mb < 1

    - name: set swap mount
      mount:
        src: /opt/swap.file
        path: none
        fstype: swap
        opts: sw
        passno: '0'
        dump: '0'
        state: present
      when:
        - ansible_swaptotal_mb < 1

    - name: mount swap now
      shell: |
        swapon /opt/swap.file
      when:
        - ansible_swaptotal_mb < 1

#    - name: required packages
#      apt:
#        pkg:
#          - python3-pip
#          - ssl-cert
#        state: latest
#        update_cache: yes

    - name: IP Forwarding enable/persist
      sysctl:
        name: net.ipv4.ip_forward
        value: '1'
        state: present
        reload: yes
        sysctl_set: yes
        sysctl_file: /etc/sysctl.conf

#    - name: db user
#      user:
#        name: fortknox
#        shell: /bin/bash
#        create_home: False
#      register: db_user

    - name: get oci metadata
      uri:
        url: http://169.254.169.254/opc/v2/vnics/
        headers:
          Authorization: "Bearer Oracle"
      register: oci_vnic_metadata

    - name: get oci private ip facts
      oci_network_private_ip_facts:
        auth_type: "instance_principal"
        vnic_id: "{{ oci_vnic_metadata.json[0].vnicId }}"
        tenancy: "{{ oci_root_compartment }}"
      register: private_ip_data

    - name: get oci public ip facts
      oci_network_public_ip_facts:
        auth_type: "instance_principal"
        private_ip_id: "{{ private_ip_data.private_ips[0].id }}"
      register: public_ip_data

    - name: set public ip fact for webproxy
      set_fact:
        instance_public_ip: "{{ public_ip_data.public_ips[0].ip_address }}"

    - name: various container directories - application
      file:
        path: "{{ item }}"
        state: directory
        owner: www-data
        mode: '0750'
      with_items:
        - "{{ project_directory }}/fortknox_app"
        - "{{ project_directory }}/fortknox_app/var"
        - "{{ project_directory }}/fortknox_app/var/www"
        - "{{ project_directory }}/fortknox_app/var/www/html"
        - "{{ project_directory }}/fortknox_app/var/www/html/custom_apps"
        - "{{ project_directory }}/fortknox_app/var/www/html/config"
        - "{{ project_directory }}/fortknox_app/var/www/html/data"

#    - name: various container directories - webproxy
#      file:
#        path: "{{ item }}"
#        state: directory
#        owner: root
#        group: root
#        mode: '0750'
#      with_items:
#        - "{{ project_directory }}/fortknox_webproxy"

#    - name: various container directories - db
#      file:
#        path: "{{ item }}"
#        state: directory
#        owner: "{{ db_user.name }}"
#        group: "{{ db_user.group }}"
#        mode: '0750'
#      with_items:
#        - "{{ project_directory }}/fortknox_db"

#    - name: various container directories - onlyoffice
#      file:
#        path: "{{ item }}"
#        state: directory
#        owner: '104'
#        group: '107'
#        mode: '0750'
#      with_items:
#        - "{{ project_directory }}/fortknox_onlyoffice"
#        - "{{ project_directory }}/fortknox_onlyoffice/certs"

#    - name: web_port if not defined
#      set_fact:
#        web_port: "{% if web_port is not defined %}443{% else %}{{ web_port }}{% endif %}"

#    - name: secure web proxy
#      template:
#        src: "{{ item }}"
#        dest: "{{ project_directory }}/fortknox_webproxy/{{ item }}"
#        owner: root
#        group: root
#        mode: 0444
#      with_items:
#        - httpd-ssl.conf
#        - httpd.conf

#    - name: Determine fortknox state
#      stat:
#        path: "{{ project_directory }}/fortknox/var/www/html/data/ncadmin"
#      register: fortknox_state

    - name: get backup from storage if exists
      oci_object_storage_object:
        auth_type: "instance_principal"
        namespace_name: "{{ oci_storage_namespace }}"
        bucket_name: "{{ oci_storage_bucketname }}"
        object_name: "fortknox/fortknox_app_backup.tar.gz"
        dest: "{{ project_directory }}/fortknox_app_backup.tar.gz"
      when: fortknox_state.stat.exists|bool == False
      ignore_errors: True

    - name: unarchive backup if dir not exists
      unarchive:
        src: "{{ project_directory }}/fortknox_app_backup.tar.gz"
        dest: "{{ project_directory }}/"
        remote_src: yes
      when: fortknox_state.stat.exists|bool == False
      ignore_errors: True

    - name: Determine fortknox db state
      stat:
        path: "{{ project_directory }}/fortknox_db"
      register: fortknox_db_state

    - name: get db backup from storage if exists
      oci_object_storage_object:
        auth_type: "instance_principal"
        namespace_name: "{{ oci_storage_namespace }}"
        bucket_name: "{{ oci_storage_bucketname }}"
        object_name: "fortknox/fortknox_db_backup.tar.gz"
        dest: "{{ project_directory }}/fortknox_db_backup.tar.gz"
      when: fortknox_state.stat.exists|bool == False
      ignore_errors: True

    - name: unarchive db backup if dir not exists
      unarchive:
        src: "{{ project_directory }}/fortknox_db_backup.tar.gz"
        dest: "{{ project_directory }}/"
        remote_src: yes
        owner: fortknoxdb
        group: fortknoxdb
      when: fortknox_db_state.stat.exists|bool == False
      ignore_errors: True

 #   - name: docker network
 #     docker_network:
 #       name: cloudoffice
 #       driver: bridge
 #       ipam_config:
 #         - subnet: "{{ docker_network }}/24"
 #           gateway: "{{ docker_gw }}"

#    - name: db container
#      docker_container:
#        name: cloudoffice_database
#        hostname: cloudofficedatabase
#        image: linuxserver/mariadb:latest
#        networks:
#          - name: cloudoffice
#            ipv4_address: "{{ docker_db }}"
#        env:
#          MYSQL_ROOT_PASSWORD: "{{ admin_password_decrypt.decrypted_data.plaintext | b64decode }}"
#          MYSQL_PASSWORD: "{{ db_password_decrypt.decrypted_data.plaintext | b64decode }}"
#          MYSQL_DATABASE: fortknox
#          MYSQL_USER: fortknox
#          PUID: "{{ db_user.uid }}"
#          PGID: "{{ db_user.group }}"
#        volumes:
#          - "{{ project_directory }}/fortknox_db:/config:rw"
#        pull: yes
#        purge_networks: yes
#        restart_policy: "always"
#        container_default_behavior: "compatibility"
#      no_log: True

#    - name: fortknox container
#      docker_container:
#        name: cloudoffice_fortknox
#        hostname: cloudofficefortknox
#        image: fortknox:latest
#        networks:
#          - name: cloudoffice
#            ipv4_address: "{{ docker_fortknox }}"
#        env:
#          NEXTCLOUD_ADMIN_PASSWORD: "{{ admin_password_decrypt.decrypted_data.plaintext | b64decode }}"
#          NEXTCLOUD_ADMIN_USER: ncadmin
#          NEXTCLOUD_TRUSTED_DOMAINS: "{{ instance_public_ip }} {{ docker_webproxy }} {{ docker_fortknox }}"
#          TRUSTED_PROXIES: "{{ instance_public_ip }} {{ docker_webproxy }}"
#          OVERWRITEHOST: "{{ instance_public_ip }}:{{ web_port }}"
#          OVERWRITEPROTOCOL: https
#          MYSQL_PASSWORD: "{{ db_password_decrypt.decrypted_data.plaintext | b64decode }}"
#          MYSQL_DATABASE: fortknox
#          MYSQL_USER: fortknox
#          MYSQL_HOST: "{{ docker_db }}"
#        volumes:
#          - "{{ project_directory }}/fortknox_app/var/www/html:/var/www/html:rw"
#          - "{{ project_directory }}/fortknox_app/var/www/html/custom_apps:/var/www/html/custom_apps:rw"
#          - "{{ project_directory }}/fortknox_app/var/www/html/config:/var/www/html/config:rw"
#          - "{{ project_directory }}/fortknox_app/var/www/html/data:/var/www/html/data:rw"
#          - "{{ project_directory }}/fortknox_app/var/www/html/themes:/var/www/html/themes:rw"
#        pull: yes
#        purge_networks: yes
#        restart_policy: "always"
#        container_default_behavior: "compatibility"
#      no_log: True

#    - name: web proxy container
#      docker_container:
#        name: cloudoffice_webproxy
#        hostname: cloudoffice_webproxy
#        image: httpd:2.4
#        networks:
#          - name: cloudoffice
#            ipv4_address: "{{ docker_webproxy }}"
#        ports:
#          - "{{ web_port }}:{{ web_port }}"
#        volumes:
#          - "{{ project_directory }}/fortknox_webproxy/httpd-ssl.conf:/usr/local/apache2/conf/extra/httpd-ssl.conf:ro"
#          - "{{ project_directory }}/fortknox_webproxy/httpd.conf:/usr/local/apache2/conf/httpd.conf:ro"
#          - /etc/ssl/certs/ssl-cert-snakeoil.pem:/usr/local/apache2/conf/server.crt:ro
#          - /etc/ssl/private/ssl-cert-snakeoil.key:/usr/local/apache2/conf/server.key:ro
#        pull: yes
#        purge_networks: yes
#        restart_policy: "always"
#        container_default_behavior: "compatibility"
#      no_log: True

#    - name: onlyoffice container
#      docker_container:
#        name: cloudoffice_onlyoffice
#        hostname: cloudofficeonlyoffice
#        image: onlyoffice/documentserver
#        networks:
#          - name: cloudoffice
#            ipv4_address: "{{ docker_onlyoffice }}"
#        env:
#          ONLYOFFICE_HTTPS_HSTS_ENABLED: "false"
#          USE_UNAUTHORIZED_STORAGE: "true"
#          JWT_ENABLED: "true"
#          JWT_SECRET: "{{ oo_password_decrypt.decrypted_data.plaintext | b64decode }}"
#        volumes:
#          - /opt/fortknox_onlyoffice:/var/www/onlyoffice/Data:rw
#          - /etc/ssl/certs/ssl-cert-snakeoil.pem:/var/www/onlyoffice/Data/certs/onlyoffice.crt:ro
#          - /etc/ssl/private/ssl-cert-snakeoil.key:/var/www/onlyoffice/Data/certs/onlyoffice.key:ro
#        ports:
#          - "{{ oo_port }}:443"
#        pull: yes
#        purge_networks: yes
#        restart_policy: "always"
#        container_default_behavior: "no_defaults"
#        auto_remove: no
#        detach: yes
#        init: no
#        interactive: no
#        memory: "0"
#        paused: no
#        read_only: no
#        tty: yes
#      no_log: True

#    - name: iptables accept HTTPS
#      iptables:
#        chain: INPUT
#        protocol: tcp
#        destination_port: '{{ web_port }}'
#        ctstate: 'NEW'
#        jump: ACCEPT
#        action: insert
#        rule_num: '2'

#    - name: iptables accept HTTPS
#      iptables:
#        chain: INPUT
#        protocol: tcp
#        destination_port: '{{ oo_port }}'
#        ctstate: 'NEW'
#        jump: ACCEPT
#        action: insert
#        rule_num: '2'

#    - name: iptables Persistent
#      shell: |
#        iptables-save

#    - name: fortknox onlyoffice storage and talk scripts (clear)
#      file:
#        path: "{{ project_directory }}/fortknox_app/fortknox-{{ item }}.sh"
#        state: absent
#      with_items:
#        - onlyoffice
#        - storage
#        - talk

#    - name: fortknox onlyoffice (set)
#      lineinfile:
#        path: "{{ project_directory }}/fortknox_app/fortknox-onlyoffice.sh"
#        create: yes
#        owner: root
#        group: root
#        mode: '0500'
#        line: "{{ item }}"
#      no_log: True
#      with_items:
#        - "#!/bin/bash"
#        - "# install and configure onlyoffice connector"
#        - "docker exec --user www-data cloudoffice_fortknox php occ app:install onlyoffice"
#        - "docker exec --user www-data cloudoffice_fortknox php occ app:enable onlyoffice"
#        - "docker exec --user www-data cloudoffice_fortknox php occ config:system:set onlyoffice DocumentServerUrl --value='https://{{ instance_public_ip }}:{{ oo_port }}/'"
#        - "docker exec --user www-data cloudoffice_fortknox php occ config:system:set onlyoffice verify_peer_off --value=true --type=boolean"
#        - "docker exec --user www-data cloudoffice_fortknox php occ config:app:set onlyoffice disable_certificate_verification --value='yes'"
#        - "docker exec --user www-data cloudoffice_fortknox php occ config:app:set onlyoffice jwt_secret --value {{ oo_password_decrypt.decrypted_data.plaintext | b64decode }}"

#    - name: fortknox storage (set)
#      lineinfile:
#        path: "{{ project_directory }}/fortknox_app/fortknox-storage.sh"
#        create: yes
#        owner: root
#        group: root
#        mode: '0500'
#        line: "{{ item }}"
#      no_log: True
#      with_items:
#        - "#!/bin/bash"
#        - "# ensure files_external is enabled"
#        - "docker exec --user www-data cloudoffice_fortknox php occ app:install files_external"
#        - "docker exec --user www-data cloudoffice_fortknox php occ app:enable files_external"
#        - "# check bucket against existing storage"
#        - "docker exec --user www-data cloudoffice_fortknox php occ files_external:list | grep --quiet 'cloud-storage'"
#        - "# if doesn't exist, create"
#        - "if [ $? -ne 0 ]"
#        - "then"
#        - "  docker exec --user www-data cloudoffice_fortknox php occ files_external:create -c bucket={{ oci_storage_bucketname }}-data -c hostname={{ oci_storage_namespace }}.compat.objectstorage.{{ oci_region }}.oraclecloud.com -c port=443 -c region={{ oci_region }} -c use_ssl=true -c use_path_style=true -c key={{ bucket_user_id }} -c secret={{ bucket_user_key_decrypt.decrypted_data.plaintext | b64decode }} cloud-storage amazons3 amazons3::accesskey"
#        - "  STORAGE_ID=$(docker exec --user www-data cloudoffice_fortknox php occ files_external:list | awk '/cloud-storage/ {a=$2}END{print a}')"
#        - "  docker exec --user www-data cloudoffice_fortknox php occ files_external:option $STORAGE_ID enable_sharing true"
#        - "else"
#        - "  echo 'cloud storage exists, skipping.'"
#        - "fi"

#    - name: fortknox talk (set)
#      lineinfile:
#        path: "{{ project_directory }}/fortknox_app/fortknox-talk.sh"
#        create: yes
#        owner: root
#        group: root
#        mode: '0500'
#        line: "{{ item }}"
#      with_items:
#        - "#!/bin/bash"
#        - "# install spreed (talk)"
#        - "docker exec --user www-data cloudoffice_fortknox php occ app:install spreed"
#        - "docker exec --user www-data cloudoffice_fortknox php occ app:enable spreed"

#    - name: wait for fortknox 200OK
#      uri:
#        url: "https://127.0.0.1:{{ web_port }}/login"
#        status_code: 200
#        validate_certs: no
#      register: fk_wait_result
#      until: fk_wait_result.status == 200
#      retries: 180
#      delay: 1

#    - name: fortknox onlyoffice storage and talk (execute)
#      shell:
#        cmd: "{{ project_directory }}/fortknox_app/fortknox-{{ item }}.sh"
#      args:
#        executable: /bin/bash
#      with_items:
#        - onlyoffice
#        - storage
#        - talk

    - name: fortknox backup playbook (clear)
      file:
        path: "{{ project_directory }}/fortknox-backup.yml"
        state: absent

    - name: fortknox backup playbook (set)
      lineinfile:
        path: "{{ project_directory }}/fortknox-backup.yml"
        create: yes
        owner: root
        group: root
        mode: '0640'
        line: "{{ item }}"
      with_items:
        - "---"
        - "- name: fortknox-backup.yml"
        - "  hosts: localhost"
        - "  gather_facts: false"
        - "  collections:"
        - "    - oracle.oci"
        - "  tasks:"
        - "  "
        - "    - name: archive fortknox locally"
        - "      archive:"
        - "        path: \"{{ project_directory }}/{{ '{{ item }}' }}\""
        - "        dest: \"{{ project_directory }}/{{ '{{ item }}' }}_backup.tar.gz\""
        - "        format: gz"
        - "        owner: root"
        - "        group: root"
        - "        mode: '0640'"
        - "      with_items:"
        - "        - fortknox_app"
        - "        - fortknox_db"
        - "   "
        - "    - name: upload fortknox archive to storage"
        - "      oci_object_storage_object:"
        - "        auth_type: \"instance_principal\""
        - "        namespace_name: \"{{ oci_storage_namespace }}\""
        - "        bucket_name: \"{{ oci_storage_bucketname }}\""
        - "        object_name: \"fortknox/{{ '{{ item }}' }}_backup.tar.gz\""
        - "        src: \"{{ project_directory }}/{{ '{{ item }}' }}_backup.tar.gz\""
        - "      with_items: "
        - "        - fortknox_app "
        - "        - fortknox_db "

    - name: fortknox backup systemd timer
      blockinfile:
        path: /etc/systemd/system/fortknox-backup.timer
        create: yes
        owner: root
        group: root
        mode: '0644'
        block: |
          [Unit]
          Description=Archives and copies fortknox_app and fortknox_db directories to cloud storage
          [Timer]
          OnUnitActiveSec=12h
          Unit=fortknox-backup.service
          [Install]
          WantedBy=multi-user.target

    - name: fortknox backup systemd service
      blockinfile:
        path: /etc/systemd/system/fortknox-backup.service
        create: yes
        owner: root
        group: root
        mode: '0644'
        block: |
          [Unit]
          Description=Archives and copies fortknox_app and fortknox_db directories to cloud storage
          After=network.target
          [Service]
          ExecStart=/usr/local/bin/ansible-playbook {{ project_directory }}/fortknox-backup.yml
          Type=simple
          Restart=no
          [Install]
          WantedBy=multi-user.target

    - name: fortknox backup service enable
      systemd:
        name: fortknox-backup.service
        daemon_reload: yes
        enabled: yes

    - name: fortknox backup timer enable and start
      systemd:
        name: fortknox-backup.timer
        daemon_reload: yes
        state: started
        enabled: yes
